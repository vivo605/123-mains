export {}

type Person = {
  name: string
  age: number
  isMarried: boolean
  gender: 'm' | 'f'
  books: string[]
}

// TODO: –∑–∞–ø–æ–ª–Ω–∏—Ç—å
const persons: Person[] = [
  {
    name: '–ú–∏—à—É—Ç–∫–∞',
    age: 14,
    isMarried: true,
    gender: 'm',
    books: ['–≥—Ä–æ–∫–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã', '–¥–µ—Ç–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞ –≥—Ä–∞–Ω—Ç–∞']
  },
  {
    name: '–ú–∏—à—É—Ç–∫–∞',
    age: 11,
    isMarried: false,
    gender: 'm',
    books: []
  },
  {
    name: '–í–∏—Ç–∞–ª–∏–π',
    age: 12,
    isMarried: false,
    gender: 'm',
    books: [],
  },
  {
    name: '–í–∞—Å—è',
    age: 32,
    isMarried: false,
    gender: 'm',
    books: [],
  },
  {
    name: '–ö–∞—Ç—é—à–∞',
    age: 14,
    isMarried: true,
    gender: 'f',
    books: ['–∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã', '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä']
  },
  {
    name: '–ü–µ—Ç—è',
    age: 40,
    isMarried: true,
    gender: 'm',
    books: []
  },
]

// const notZero = numbers.filter((n) => n !== 0) // 2 5 7 3

const adultCount: number = (
  persons
    .filter((p) => (
      p.age >= 18 
      &&
      !p.isMarried
      &&
      p.gender === 'm'
    ))
    .length
)
print(`–í–∑—Ä–æ—Å–ª—ã—Ö —Ö–æ–ª–æ—Å—Ç—è–∫–æ–≤: ${adultCount}`)

const presonsCount: number = persons.length

// const likeBook: boolean = (
//   persons
//     .filter((p) => p.books.length !== 0)
//     .length == persons.length
// )
const allHaveFavouriteBooks: boolean = persons.every(p => p.books.length !== 0)
print(`${allHaveFavouriteBooks ? '–í—Å–µ' : '–ù–µ –≤—Å–µ'} –∂–∏—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏`)

const smthLikePoter: boolean = persons.some(p => p.books.includes('–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä'))
print(`${smthLikePoter ? '–ï—Å—Ç—å –ª—é–±–∏—Ç–µ–ª—å' : '–ù–µ—Ç –ª—é–±–∏—Ç–µ–ª–µ–π (–±–µ–¥–Ω—ã–π –ì–∞—Ä—Ä–∏ üò≠üò≠üò≠)'} –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞`)


// TODO: –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
/*

- —É–±—Ä–∞—Ç—å —á–µ–ª–∞ –ø–æ –∏–º–µ–Ω–∏ –í–∞—Å—è (–æ–Ω –º–Ω–µ –ø–æ-–∫—Ä—É–ø–Ω–æ–º—É –∑–∞–¥–æ–ª–∂–∞–ª)–≤
- –≤–µ—Ä–Ω—É—Ç—å –í–∞—Å—é –æ–±—Ä–∞—Ç–Ω–æ (–ø–æ—Ä–∞ –æ—Ç–∫–æ–ø–∞—Ç—å, –æ–Ω –æ–±–µ—â–∞–ª –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è)
- –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞ –í–∞—Å–µ–π –ü–µ—Ç—é (–±—É–¥–µ—Ç –∑–∞ –Ω–∏–º –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å)

*/

const vasya = persons.find(p => p.name === '–í–∞—Å—è')
// const indexOfVasya = persons.findIndex(p => p.name === '–í–∞—Å—è')
if (vasya) {
  const indexOfVasya = persons.indexOf(vasya)
  print('–ú—ã –í–∞—Å—é –Ω–µ –ª—é–±–∏–º.–£–¥–∞–ª—è—é —Ç–∞–∫–∏—Ö... üòîüòîüòî')
  persons.splice(indexOfVasya, 1)
  print('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ üòéüòé')
}

if (vasya == undefined){
  print('–í–∞—Å—è —Å–∫–∞–∑–∞–ª —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ—ç—Ç–æ–º—É, –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–∫–æ–ø–∞—Ç—å')
}

// TODO - –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç (—Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞)
const averageAge = persons.reduce((sum, person) => sum + person.age, 0) / persons.length;
print(`–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: ${averageAge} –ª–µ—Ç`);

// if (vasya) {
//   const newIndex = Math.trunc(persons.length / 2)
//   persons.splice(newIndex, 0, vasya)
// }



print() // –ò —á—Ç–æ —ç—Ç–æ –∑–∞ print?
print('=== –°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å ===')
const marriedStatus = (person: Person): string => {
  switch (person.gender) {
    case "m":
      return (
        person.isMarried 
          ? '–∂–µ–Ω–∞—Ç'
          : '–Ω–µ –∂–µ–Ω–∞—Ç'
      )
    case "f":
      return (
        person.isMarried 
          ? '–∑–∞–º—É–∂–µ–º'
          : '–Ω–µ –∑–∞–º—É–∂–µ–º'
      )
  }
}
persons.toSorted((p1, p2) => p2.name.localeCompare(p1.name, 'ru')).forEach(p => {
  print(`${p.name}: ${marriedStatus(p)}`)
})

print()
print('=== –ò–º–µ–Ω–∞ ===')

type NamesCount = {
  [key in string]: number
}

const names: NamesCount = {}

for (const p of persons) {
  // if (p.name in names) {
  //   names[p.name]!++
  // } else{
  //   names[p.name] = 1
  // }
  const count = names[p.name]
  if (typeof count !== 'undefined') {
    names[p.name] = count + 1
  } else {
    names[p.name] = 1
  }
}

for (const name in names) {
  const count = names[name]
  print(`${name}: ${count}`)
}

// –ê–Ω—è: 0
// names['–ê–Ω—è'] = 0
