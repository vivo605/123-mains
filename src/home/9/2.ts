export {}

type Person = {
  name: string
  age: number
  isMarried: boolean
  gender: 'm' | 'f'
  books: string[]
}

// TODO: –∑–∞–ø–æ–ª–Ω–∏—Ç—å
const persons: Person[] = [
  {
    name: '–ú–∏—à—É—Ç–∫–∞',
    age: 21,
    isMarried: true,
    gender: 'm',
    books: ['–≥—Ä–æ–∫–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã', '–¥–µ—Ç–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞ –≥—Ä–∞–Ω—Ç–∞']
  },
  {
    name: '–ú–∏—à—É—Ç–∫–∞',
    age: 11,
    isMarried: false,
    gender: 'm',
    books: []
  },
  {
    name: '–í–∏—Ç–∞–ª–∏–π',
    age: 12,
    isMarried: false,
    gender: 'm',
    books: [],
  },
  {
    name: '–ö–∞—Ç—é—à–∞',
    age: 34,
    isMarried: true,
    gender: 'f',
    books: ['–∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã', '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä']
  },
]

// const notZero = numbers.filter((n) => n !== 0) // 2 5 7 3

const adultCount: number = (
  persons
    .filter((p) => (
      p.age >= 18 
      &&
      !p.isMarried
      &&
      p.gender === 'm'
    ))
    .length
)
print(`–í–∑—Ä–æ—Å–ª—ã—Ö —Ö–æ–ª–æ—Å—Ç—è–∫–æ–≤: ${adultCount}`)

const presonsCount: number = persons.length

// const likeBook: boolean = (
//   persons
//     .filter((p) => p.books.length !== 0)
//     .length == persons.length
// )
const allHaveFavouriteBooks: boolean = persons.every(p => p.books.length !== 0)
print(`${allHaveFavouriteBooks ? '–í—Å–µ' : '–ù–µ –≤—Å–µ'} –∂–∏—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏`)

const smthLikePoter: boolean = persons.some(p => p.books.includes('–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä'))
print(`${smthLikePoter ? '–ï—Å—Ç—å –ª—é–±–∏—Ç–µ–ª—å' : '–ù–µ—Ç –ª—é–±–∏—Ç–µ–ª–µ–π (–±–µ–¥–Ω—ã–π –ì–∞—Ä—Ä–∏ üò≠üò≠üò≠)'} –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞`)


// TODO: –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

print()
print('=== –°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å ===')
const marriedStatus = (person: Person): string => {
  switch (person.gender) {
    case "m":
      return (
        person.isMarried 
          ? '–∂–µ–Ω–∞—Ç'
          : '–Ω–µ –∂–µ–Ω–∞—Ç'
      )
    case "f":
      return (
        person.isMarried 
          ? '–∑–∞–º—É–∂–µ–º'
          : '–Ω–µ –∑–∞–º—É–∂–µ–º'
      )
  }
}
persons.toSorted((p1, p2) => p2.name.localeCompare(p1.name, 'ru')).forEach(p => {
  print(`${p.name}: ${marriedStatus(p)}`)
})

print()
print('=== –ò–º–µ–Ω–∞ ===')

type NamesCount = {
  [key in string]: number
}

const names: NamesCount = {}

for (const p of persons) {
  // if (p.name in names) {
  //   names[p.name]!++
  // } else{
  //   names[p.name] = 1
  // }
  const count = names[p.name]
  if (typeof count !== 'undefined') {
    names[p.name] = count + 1
  } else {
    names[p.name] = 1
  }
}

for (const name in names) {
  const count = names[name]
  print(`${name}: ${count}`)
}

// –ê–Ω—è: 0
// names['–ê–Ω—è'] = 0
